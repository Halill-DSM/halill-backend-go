// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "halill/dto"

	mock "github.com/stretchr/testify/mock"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// CompleteTodo provides a mock function with given fields: _a0, _a1
func (_m *TodoService) CompleteTodo(_a0 int64, _a1 string) (*dto.TodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.TodoResponse
	if rf, ok := ret.Get(0).(func(int64, string) *dto.TodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTodo provides a mock function with given fields: _a0, _a1
func (_m *TodoService) CreateTodo(_a0 *dto.CreateTodoRequest, _a1 string) (*dto.TodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.TodoResponse
	if rf, ok := ret.Get(0).(func(*dto.CreateTodoRequest, string) *dto.TodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateTodoRequest, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: _a0, _a1
func (_m *TodoService) DeleteTodo(_a0 int64, _a1 string) (*dto.TodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.TodoResponse
	if rf, ok := ret.Get(0).(func(int64, string) *dto.TodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTodos provides a mock function with given fields: _a0
func (_m *TodoService) GetAllTodos(_a0 string) ([]*dto.TodoResponse, error) {
	ret := _m.Called(_a0)

	var r0 []*dto.TodoResponse
	if rf, ok := ret.Get(0).(func(string) []*dto.TodoResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.TodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: _a0, _a1
func (_m *TodoService) GetTodo(_a0 int64, _a1 string) (*dto.TodoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.TodoResponse
	if rf, ok := ret.Get(0).(func(int64, string) *dto.TodoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
