// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "halill/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: _a0
func (_m *UserService) LoginUser(_a0 *dto.LoginRequest) (*dto.TokenResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TokenResponse
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest) *dto.TokenResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.LoginRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: _a0
func (_m *UserService) RefreshToken(_a0 *dto.RefreshTokenRequest) (*dto.TokenResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TokenResponse
	if rf, ok := ret.Get(0).(func(*dto.RefreshTokenRequest) *dto.TokenResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RefreshTokenRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistUser provides a mock function with given fields: _a0
func (_m *UserService) RegistUser(_a0 *dto.RegistRequest) (*dto.UserResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(*dto.RegistRequest) *dto.UserResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RegistRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
